function [N, np, A120, xtotal] = geometry_grid(n,m,s,l1,l2,h)

% with: 
%   - = pip
%   o = unknown head node
%   * = fixed head node
% 
% size of problem:
% n, m, l1 & l2 are imported from ensemble run
% n      % grid width (number of nodes wide)
% m      % grid height (number of nodes high)
% l1     % length of horizontal pipes
% l2     % length of vertical pipes
% s      % the number of seams

N  = n*m*s;     % nr of unknown head nodes
np  = ((n-1)*m + (m-1)*n)*s;     % nr of pipes
A120 = sparse(np,N); % global incidence matrix

%% Assigning Node Coordinates
[X, Y, Z] = meshgrid(1:l1:n*l1,1:l2:m*l2,1:h:s*h); % needs to be unpacked
X = X(:);
Y = Y(:);
Z = Z(:);
size(X)
xtotal = zeros(N,3);
i = 1;
for x = 1:N
    for y = 1:N
        for z = 1:N
            xtotal(i,:) = [X(x),Y(y),Z(z)];
            i = i + 1;
        end
    end
end

%% locations of boundary unknown-nodes:
for is = 1:s
    o = n*m*(is-1); % node offset
    for in = 1:n*m
        x(in,:) = [((in-1)-floor((in-1)/n)*n)*l1, floor((in-1)/n)*l2];
        if in==1 % corner1 - check
            A120(1,in) = -1;
            A120((n-1)*m+1,in) = -1;
        elseif in==n % corner2 - check
            A120((n-2)*m+1,in) = 1;
            A120((n-1)*m+n,in) = -1;
        elseif in==(m-1)*n+1 % corner3 - check
            A120((n-1)*m+(m-2)*n+1,in) = 1;
            A120(m,in) = -1;
        elseif in==n*m % corner4 - check
            A120((n-1)*m,in) = 1;
            A120((n-1)*m+(m-1)*n,in) = 1;
        elseif in>=2 && in<=n-1 % bottom boundary of grid - check
            A120((in-2)*m+1,in) = 1;
            A120((n-1)*m+in,in) = -1;
            A120((in-1)*m+1,in) = -1;
        elseif (in/n)>1 && (in/n)<m-1 && mod(in-1,n)==0 % left boundary of grid - check
            A120(in-1+(n-1)*(m-1),in) = 1;
            A120((in-1)/n+1,in) = -1;
            A120(in-1+n+(n-1)*(m-1),in) = -1;
        elseif (in/n)>1 && (in/n)<=m-1 && mod(in,n)==0% right boundary of grid - check
            A120(in-n+(n-1)*m,in) = 1; 
            A120(in/n+(n-2)*m,in) = 1;
            A120(in+(n-1)*m,in) = -1;
        elseif in>(m-1)*n+1 && in<m*n % top boundary of grid - 
            A120((in-(m-1)*n-1)*m,in) = 1;
            A120((n-1)*m+in-n,in) = 1;
            A120((in-(m-1)*n)*m,in) = -1;
        else % the middle of grid -  
            A12((n-1)*m+in-n,in) = 1;
            A12((in-floor(in/n)*n-2)*m+floor(in/n)+1,in) = 1;
            A12((in-floor(in/n)*n-2)*m+floor(in/n)+m+1,in) = -1;
            A12((n-1)*m+in,in) = -1;
        end
    end
end

% % In and outflow - setup A10 matrix
% if id == id_max
%     if mod(n,2) ~= 0
%         id = id - 0.5;
%     end
%     
%     % Adding fixed head nodes to A10 and removing unknown head nodes from A12
%     % Bottom left corner
%     A10(1,1) = -1;
%     A10((n-1)*m+1,1) = -1;
%     % Bottom right corner
%     %A10((n-2)*m+1,2)  = 1;
%     %A10((n-1)*m+n,2)  = -1;
%     % Top left corner
%     %A10((n-1)*m+(m-2)*n+1,2) = 1;
%     %A10(m,2)  = -1;
%     % Top right corner
%     A10((n-1)*m,2) = 1;
%     A10((n-1)*m+(m-1)*n,2) = 1;
% 
%     % locations of known-nodes: 
%     xo(1,:) = [       0        0];
%     %xo(2,:) = [(n-1)*l1        0];
%     %xo(2,:) = [       0 (m-1)*l2];
%     xo(2,:) = [(n-1)*l1 (m-1)*l2];
% 
%     % Remove the same node(s) from the unknown head matrix (A12) and the unknown head
%     % locations matrix (x). Note: start with highest ranked nodes and work down
%     % in order not to change the order of the other nodes before removing them
%     % Top right corner
%     A12(:,n*m)= [];
%     x(n*m,:)  = [];
%     % Top left corner
%     %A12(:,(m-1)*n+1) = [];
%     %x((m-1)*n+1,:)   = [];
%     % Bottom right corner
%     %A12(:,n)  = [];
%     %x(n,:)    = [];
%     % Bottom left corner
%     A12(:,1)  = [];
%     x(1,:)    = [];
% 
%     % Output pipes for later reference
%     p_output = zeros(2,1);
%     %p_output(1,1) = m;
%     %p_output(2,1) = (n-1)*m+(m-2)*n+1;
%     p_output(1,1) = (n-1)*m;
%     p_output(2,1) = (n-1)*m+(m-1)*n;
% else
%     % Set flows next to each other in middle so that system is symmetrical
%     % with distance from origin 'id'
%     % if 'n' is even id>=1, if 'n' is uneven start with id=0.5 and only add
%     % full integers so that the next id=1.5 and the next id=2.5
%     % id is defined in the for loop in ensemble_run, here it is made robust
%     % for even and uneven 'n'
%     if mod(n,2) ~= 0
%         id = id - 0.5;
%     end
% 
%     % Left bottom inflow
%     A10((n-2)/2*m-(id+1)*m+1,1) = 1;
%     A10((n-2)/2*m-id*m+1,1) = -1;
%     A10((n-1)*m+n/2-id,1) = -1;
%     % Right bottom inflow
%     %A10((n-2)/2*m+id*m+1,2) = 1;
%     %A10((n-2)/2*m+(id+1)*m+1,2) = -1;
%     %A10((n-1)*m+n/2+id+1,2) = -1;
%     % Left top outflow
%     %A10(m*(n/2-(id+1)),2) = 1;
%     %A10(m*(n/2-id),2) = -1;
%     %A10((n-1)*m+(m-2)*n+n/2-id,2) = 1;
%     % Right top outflow
%     A10(m*(n/2+id),2) = 1;
%     A10(m*(n/2+id+1),2) = -1;
%     A10((n-1)*m+(m-2)*n+n/2+id+1,2) = 1;
% 
% 
%     % Location of known-nodes:
%     xo(1,:) = [(n/2-id-1)*l1        0];
%     %xo(2,:) = [  (n/2+id)*l1        0];
%     %xo(2,:) = [(n/2-id-1)*l1 (m-1)*l2];
%     xo(2,:) = [  (n/2+id)*l1 (m-1)*l2];
% 
%     % Remove the same node(s) from the unknown head matrix (A12) and the unknown head
%     % locations matrix (x). Note: start with highest ranked nodes and work down
%     % in order not to change the order of the other nodes before removing them
%     % Top right corner;
%     A12(:,(m-1)*n+n/2+id+1) = [];
%     x((m-1)*n+n/2+id+1,:) = [];
%     % Top left corner;
%     %A12(:,(m-1)*n+n/2-id) = [];
%     %x((m-1)*n+n/2-id,:) = [];
%     % Bottom right corner;
%     %A12(:,n/2+id+1) = [];
%     %x(n/2+id+1,:) = [];
%     % Bottom left corner;
%     A12(:,n/2-id) = [];
%     x(n/2-id,:) = [];
% 
%     % Output pipes for later reference
%     p_output = zeros(3,1);
%     p_output(1,1) = m*(n/2-(id+1)); 
%     p_output(2,1) = m*(n/2-id); 
%     p_output(3,1) = (n-1)*m+(m-2)*n+n/2-id; 
% end
% 
% % Change nn and no
% nn  = nn-size(xo,1);      % nr of unknown head nodes
% no  = no+size(xo,1);      % nr of fixed head nodes
% np  = np;                 % nr of pipes

% % pipe diameters: set in mine_geothermal
% d   = 4*ones(np,1);